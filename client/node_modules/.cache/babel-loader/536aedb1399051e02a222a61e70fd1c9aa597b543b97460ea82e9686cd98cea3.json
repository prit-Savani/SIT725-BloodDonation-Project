{"ast":null,"code":"// Import necessary functions and modules\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { getCurrentUser, userLogin, userRegister } from \"./authActions\";\n\n// Retrieve token from local storage if available\nconst token = localStorage.getItem(\"token\") ? localStorage.getItem(\"token\") : null;\n\n// Initial state for the authentication slice\nconst initialState = {\n  loading: false,\n  // Flag indicating if authentication actions are in progress\n  user: null,\n  // Current authenticated user\n  token,\n  // JWT token for authenticated user\n  error: null // Error object for any authentication errors\n};\n\n// Define the authSlice using createSlice\nconst authSlice = createSlice({\n  name: \"auth\",\n  // Slice name\n  initialState: initialState,\n  // Initial state\n  reducers: {},\n  // No additional reducers defined in this slice\n  extraReducers: builder => {\n    // Extra reducers for handling asynchronous actions\n\n    // Login user\n    builder.addCase(userLogin.pending, state => {\n      state.loading = true; // Set loading to true when login request is pending\n      state.error = null; // Reset error to null\n    });\n\n    builder.addCase(userLogin.fulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.loading = false; // Set loading to false when login request is fulfilled\n      state.user = payload.user; // Update user with the authenticated user data\n      state.token = payload.token; // Update token with the JWT token\n    });\n\n    builder.addCase(userLogin.rejected, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.loading = false; // Set loading to false when login request is rejected\n      state.error = payload; // Set error to the payload containing the error message\n    });\n\n    // Register user\n    builder.addCase(userRegister.pending, state => {\n      state.loading = true; // Set loading to true when register request is pending\n      state.error = null; // Reset error to null\n    });\n\n    builder.addCase(userRegister.fulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.loading = false; // Set loading to false when register request is fulfilled\n      state.user = payload.user; // Update user with the registered user data\n    });\n\n    builder.addCase(userRegister.rejected, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.loading = false; // Set loading to false when register request is rejected\n      state.error = payload; // Set error to the payload containing the error message\n    });\n\n    // Get current user\n    builder.addCase(getCurrentUser.pending, state => {\n      state.loading = true; // Set loading to true when getCurrentUser request is pending\n      state.error = null; // Reset error to null\n    });\n\n    builder.addCase(getCurrentUser.fulfilled, (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.loading = false; // Set loading to false when getCurrentUser request is fulfilled\n      state.user = payload.user; // Update user with the current user data\n    });\n\n    builder.addCase(getCurrentUser.rejected, (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.loading = false; // Set loading to false when getCurrentUser request is rejected\n      state.error = payload; // Set error to the payload containing the error message\n    });\n  }\n});\n\nexport default authSlice;","map":{"version":3,"names":["createSlice","getCurrentUser","userLogin","userRegister","token","localStorage","getItem","initialState","loading","user","error","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","_ref","payload","rejected","_ref2","_ref3","_ref4","_ref5","_ref6"],"sources":["C:/Users/TEMP/Downloads/SIT725-BloodDonation-Project/client/src/redux/features/auth/authSlice.js"],"sourcesContent":["// Import necessary functions and modules\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getCurrentUser, userLogin, userRegister } from \"./authActions\";\r\n\r\n// Retrieve token from local storage if available\r\nconst token = localStorage.getItem(\"token\") ? localStorage.getItem(\"token\") : null;\r\n\r\n// Initial state for the authentication slice\r\nconst initialState = {\r\n  loading: false,  // Flag indicating if authentication actions are in progress\r\n  user: null,      // Current authenticated user\r\n  token,           // JWT token for authenticated user\r\n  error: null      // Error object for any authentication errors\r\n};\r\n\r\n// Define the authSlice using createSlice\r\nconst authSlice = createSlice({\r\n  name: \"auth\",  // Slice name\r\n  initialState: initialState,  // Initial state\r\n  reducers: {},  // No additional reducers defined in this slice\r\n  extraReducers: (builder) => {\r\n    // Extra reducers for handling asynchronous actions\r\n\r\n    // Login user\r\n    builder.addCase(userLogin.pending, (state) => {\r\n      state.loading = true;  // Set loading to true when login request is pending\r\n      state.error = null;    // Reset error to null\r\n    });\r\n    builder.addCase(userLogin.fulfilled, (state, { payload }) => {\r\n      state.loading = false;        // Set loading to false when login request is fulfilled\r\n      state.user = payload.user;    // Update user with the authenticated user data\r\n      state.token = payload.token;  // Update token with the JWT token\r\n    });\r\n    builder.addCase(userLogin.rejected, (state, { payload }) => {\r\n      state.loading = false;  // Set loading to false when login request is rejected\r\n      state.error = payload;  // Set error to the payload containing the error message\r\n    });\r\n\r\n    // Register user\r\n    builder.addCase(userRegister.pending, (state) => {\r\n      state.loading = true;  // Set loading to true when register request is pending\r\n      state.error = null;    // Reset error to null\r\n    });\r\n    builder.addCase(userRegister.fulfilled, (state, { payload }) => {\r\n      state.loading = false;     // Set loading to false when register request is fulfilled\r\n      state.user = payload.user; // Update user with the registered user data\r\n    });\r\n    builder.addCase(userRegister.rejected, (state, { payload }) => {\r\n      state.loading = false;  // Set loading to false when register request is rejected\r\n      state.error = payload;  // Set error to the payload containing the error message\r\n    });\r\n\r\n    // Get current user\r\n    builder.addCase(getCurrentUser.pending, (state) => {\r\n      state.loading = true;  // Set loading to true when getCurrentUser request is pending\r\n      state.error = null;    // Reset error to null\r\n    });\r\n    builder.addCase(getCurrentUser.fulfilled, (state, { payload }) => {\r\n      state.loading = false;     // Set loading to false when getCurrentUser request is fulfilled\r\n      state.user = payload.user; // Update user with the current user data\r\n    });\r\n    builder.addCase(getCurrentUser.rejected, (state, { payload }) => {\r\n      state.loading = false;  // Set loading to false when getCurrentUser request is rejected\r\n      state.error = payload;  // Set error to the payload containing the error message\r\n    });\r\n  },\r\n});\r\n\r\nexport default authSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}